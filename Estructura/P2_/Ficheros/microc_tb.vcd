$date
	Wed Nov 20 11:31:35 2024
$end
$version
	Icarus Verilog
$end
$timescale
	10ps
$end
$scope module microc_tb $end
$scope module mic_1 $end
$scope module regs $end
$var reg 8 ! \R[0] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module microc_tb $end
$scope module mic_1 $end
$scope module regs $end
$var reg 8 " \R[1] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module microc_tb $end
$scope module mic_1 $end
$scope module regs $end
$var reg 8 # \R[2] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module microc_tb $end
$scope module mic_1 $end
$scope module regs $end
$var reg 8 $ \R[3] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module microc_tb $end
$scope module mic_1 $end
$scope module regs $end
$var reg 8 % \R[4] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module microc_tb $end
$scope module mic_1 $end
$scope module regs $end
$var reg 8 & \R[5] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module microc_tb $end
$scope module mic_1 $end
$scope module regs $end
$var reg 8 ' \R[6] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module microc_tb $end
$scope module mic_1 $end
$scope module regs $end
$var reg 8 ( \R[7] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module microc_tb $end
$scope module mic_1 $end
$scope module regs $end
$var reg 8 ) \R[8] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module microc_tb $end
$scope module mic_1 $end
$scope module regs $end
$var reg 8 * \R[9] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module microc_tb $end
$scope module mic_1 $end
$scope module regs $end
$var reg 8 + \R[10] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module microc_tb $end
$scope module mic_1 $end
$scope module regs $end
$var reg 8 , \R[11] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module microc_tb $end
$scope module mic_1 $end
$scope module regs $end
$var reg 8 - \R[12] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module microc_tb $end
$scope module mic_1 $end
$scope module regs $end
$var reg 8 . \R[13] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module microc_tb $end
$scope module mic_1 $end
$scope module regs $end
$var reg 8 / \R[14] [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module microc_tb $end
$var wire 1 0 z $end
$var wire 6 1 Opcode [5:0] $end
$var reg 3 2 Op [2:0] $end
$var reg 1 3 clk $end
$var reg 1 4 reset $end
$var reg 1 5 s_inc $end
$var reg 1 6 s_inm $end
$var reg 1 7 we3 $end
$var reg 1 8 wez $end
$var integer 32 9 i [31:0] $end
$scope module mic_1 $end
$var wire 3 : Op [2:0] $end
$var wire 1 3 clk $end
$var wire 1 4 reset $end
$var wire 1 5 s_inc $end
$var wire 1 6 s_inm $end
$var wire 1 7 we3 $end
$var wire 1 8 wez $end
$var wire 1 ; zero $end
$var wire 1 0 z $end
$var wire 10 < salida_sumador [9:0] $end
$var wire 10 = salida_pc [9:0] $end
$var wire 10 > salida_mux [9:0] $end
$var wire 16 ? salida_memoria [15:0] $end
$var wire 8 @ salida_alu [7:0] $end
$var wire 8 A WD3 [7:0] $end
$var wire 8 B RD_2 [7:0] $end
$var wire 8 C RD_1 [7:0] $end
$var wire 6 D Opcode [5:0] $end
$scope module alu1 $end
$var wire 3 E Op [2:0] $end
$var wire 8 F B [7:0] $end
$var wire 8 G A [7:0] $end
$var reg 8 H S [7:0] $end
$var reg 1 ; zero $end
$upscope $end
$scope module memor $end
$var wire 16 I Data [15:0] $end
$var wire 1 3 clk $end
$var wire 10 J Address [9:0] $end
$upscope $end
$scope module mux $end
$var wire 10 K D0 [9:0] $end
$var wire 1 5 s $end
$var wire 10 L Y [9:0] $end
$var wire 10 M D1 [9:0] $end
$var parameter 32 N WIDTH $end
$upscope $end
$scope module pc $end
$var wire 10 O D [9:0] $end
$var wire 1 3 clk $end
$var wire 1 4 reset $end
$var parameter 32 P WIDTH $end
$var reg 10 Q Q [9:0] $end
$upscope $end
$scope module regs $end
$var wire 4 R RA1 [3:0] $end
$var wire 4 S RA2 [3:0] $end
$var wire 4 T WA3 [3:0] $end
$var wire 1 3 clk $end
$var wire 1 7 we3 $end
$var wire 8 U WD3 [7:0] $end
$var wire 8 V RD2 [7:0] $end
$var wire 8 W RD1 [7:0] $end
$upscope $end
$scope module seg_mux $end
$var wire 8 X D0 [7:0] $end
$var wire 8 Y D1 [7:0] $end
$var wire 1 6 s $end
$var wire 8 Z Y [7:0] $end
$var parameter 32 [ WIDTH $end
$upscope $end
$scope module sumador $end
$var wire 10 \ A [9:0] $end
$var wire 10 ] B [9:0] $end
$var wire 10 ^ Y [9:0] $end
$upscope $end
$scope module zer $end
$var wire 1 8 carga $end
$var wire 1 3 clk $end
$var wire 1 ; d $end
$var wire 1 4 reset $end
$var reg 1 0 q $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1000 [
b1010 P
b1010 N
$end
#0
$dumpvars
b1 ^
b0 ]
b1 \
bx Z
b1 Y
bx X
b0 W
b0 V
bx U
b0 T
b1 S
b0 R
b0 Q
b0x000x O
b1 M
b0x000x L
b10000 K
b0 J
b1000000010000 I
bx H
b0 G
b0 F
bx E
b100 D
b0 C
b0 B
bx A
bx @
b1000000010000 ?
b0x000x >
b0 =
b1 <
x;
bx :
b1111 9
x8
x7
x6
x5
14
13
bx 2
b100 1
00
b0 /
b0 .
b0 -
b0 ,
b0 +
b0 *
b0 )
b0 (
b0 '
b0 &
b0 %
b0 $
b0 #
b0 "
b0 !
$end
#500
04
#1000
1;
b0 @
b0 H
b0 X
b1 A
b1 U
b1 Z
b1 >
b1 L
b1 O
b0 2
b0 :
b0 E
08
17
16
15
03
#2000
b10 >
b10 L
b10 O
b1 T
b10001 K
b10 <
b10 M
b10 ^
b1000000010001 ?
b1000000010001 I
b1 =
b1 J
b1 Q
b1 ]
b1 !
13
#3000
03
#4000
b11 >
b11 L
b11 O
b101100 1
b101100 D
b0 T
b10000 K
b1 B
b1 F
b1 V
b11 <
b11 M
b11 ^
b1011000000010000 ?
b1011000000010000 I
b10 =
b10 J
b10 Q
b10 ]
b1 "
13
#5000
0;
b11111111 @
b11111111 H
b11111111 X
b11111111 A
b11111111 U
b11111111 Z
03
b11 2
b11 :
b11 E
18
06
#6000
b0 A
b0 U
b0 Z
1;
b0 @
b0 H
b0 X
b0 B
b0 F
b0 V
b100 >
b100 L
b100 O
b10010 1
b10010 D
b10000000 Y
b0 S
b1000 R
b0 K
b100 <
b100 M
b100 ^
b100100000000000 ?
b100100000000000 I
b11 =
b11 J
b11 Q
b11 ]
b11111111 !
13
#7000
03
#8000
b101 >
b101 L
b101 O
b1 T
b1 K
b101 <
b101 M
b101 ^
b100100000000001 ?
b100100000000001 I
b100 =
b100 J
b100 Q
b100 ]
10
b0 !
13
